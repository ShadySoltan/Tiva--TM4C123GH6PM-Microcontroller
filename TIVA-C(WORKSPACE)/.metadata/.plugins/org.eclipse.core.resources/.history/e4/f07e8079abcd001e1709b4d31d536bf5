#include "tm4c123gh6pm_registers.h"

/*Requirements:
     a) MCU Frequency is 80MHZ (Use PLL)
     b) Use 3 RGB LEDS at PF1, PF2, and PF3
     c) A roll action is performed using the 3 LEDs each LED for 1 Second. This operation is done continuously
     d) Use SYSTICK timer to count the one second using interrupt technique*/

/*_______________________________________________________________________________________________________________*/

//Masking Values for PLL Registers
#define SYSCTL_RCC2_USERCC2_MASK        0x80000000  /* USERCC2 Bit MASK */
#define SYSCTL_RCC2_BYPASS2_MASK        0x00000800  /* PLL BYPASS2 Bit MASK */
#define SYSCTL_RCC_XTAL_MASK            0x000007C0  /* XTAL Bits MASK */
#define SYSCTL_RCC_XTAL_8MHZ            0x0E        /* 8 MHz Crystal Value */
#define SYSCTL_RCC_XTAL_16MHZ           0x15        /* 16 MHz Crystal Value */
#define SYSCTL_RCC_XTAL_BIT_POS         6           /* XTAL Bits Position start from bit number 6 */
#define SYSCTL_RCC2_OSCSRC2_MASK        0x00000070  /* OSCSRC2 Bits MASK */
#define SYSCTL_RCC2_OSCSRC2_MOSC        0x0         /* MOSC(Main Oscillator) value */
#define SYSCTL_RCC2_OSCSRC2_BIT_POS     4           /* OSCSRC2 Bits Position start from bit number 4 */
#define SYSCTL_RCC2_PWRDN2_MASK         0x00002000  /* PWRDN2 Bit MASK */
#define SYSCTL_RCC2_DIV400_MASK         0x40000000  /* DIV400 Bit MASK to Divide PLL as 400 MHz vs. 200 */
#define SYSCTL_RCC2_SYSDIV2_MASK        0x1FC00000  /* SYSDIV2 Bits MASK */
#define SYSCTL_RIS_PLLLRIS_MASK         0x00000040  /* PLLLRIS Bit MASK */
#define SYSCTL_RCC2_SYSDIV2_BIT_POS     22       /* SYSDIV2 Bits Position start from bit number 22 */
#define SYSDIV2_VALUE                   4

void PLL_Init(void)
{
    //Configure the system to use RCC2
    SYSCTL_RCC2_REG |= SYSCTL_RCC2_USERCC2_MASK;

    //Bypass PLL while initializing, do not use PLL while Initialization
    SYSCTL_RCC2_REG |= SYSCTL_RCC2_PWRDN2_MASK;

    //Select the crystal value and source 16MHZ from main oscillator
    SYSCTL_RCC_REG &= ~SYSCTL_RCC_XTAL_MASK; //Clear all the XTAL bits first
    SYSCTL_RCC_REG |= (SYSCTL_RCC2_OSCSRC2_MOSC << SYSCTL_RCC_XTAL_BIT_POS); //Choose 16bit Oscillator
    SYSCTL_RCC2_REG &= ~SYSCTL_RCC2_OSCSRC2_MOSC;
    SYSCTL_RCC2_REG |= (SYSCTL_RCC2_OSCSRC2_MOSC << SYSCTL_RCC2_OSCSRC2_BIT_POS); //Source Main Oscillator

    //Activate PLL
    SYSCTL_RCC2_REG &= ~SYSCTL_RCC2_PWRDN2_MASK;

    //Set the desired system divider
    SYSCTL_RCC2_REG |= SYSCTL_RCC2_DIV400_MASK;
    SYSCTL_RCC2_REG = (SYSCTL_RCC2_REG & ~SYSCTL_RCC2_SYSDIV2_MASK) | (SYSDIV2_VALUE << SYSCTL_RCC2_SYSDIV2_BIT_POS);

    //Wait for PLL to LOCK and start working on 80MHZ
    while(!(SYSCTL_RIS_REG & SYSCTL_RIS_PLLLRIS_MASK));

    //Enable PLL and connect it using bybass
    SYSCTL_RCC2_REG &= ~SYSCTL_RCC2_BYPASS2_MASK;
}

//Initialize Systick timer
void SysTick_Timer(void)
{
    SYSTICK_CTRL_REG    = 0;               /* Disable the SysTick Timer by Clear the ENABLE Bit */
    SYSTICK_RELOAD_REG  = 15999999;        /* Set the Reload value with 15999999 to count 0.2 Second */
    SYSTICK_CURRENT_REG = 0;               /* Clear the Current Register value */
    /* Configure the SysTick Control Register
     * Enable the SysTick Timer (ENABLE = 1)
     * Enable SysTick Interrupt (INTEN = 0)
     * Choose the clock source to be System Clock (CLK_SRC = 1) */
    SYSTICK_CTRL_REG   |= 0x07;
}

int main(void)
{
	return 0;
}
