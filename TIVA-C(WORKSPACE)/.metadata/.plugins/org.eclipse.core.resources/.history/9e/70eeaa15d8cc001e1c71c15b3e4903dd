#include "tm4c123gh6pm_registers.h"

#define GPIO_PORTF_PRIORITY_MASK      0xFF1FFFFF
#define GPIO_PORTF_PRIORITY_BITS_POS  21
#define GPIO_PORTF_INTERRUPT_PRIORITY 2

#define NUMBER_OF_ITERATIONS_PER_ONE_MILI_SECOND 364

void Delay_MS(unsigned long long n)
{
    volatile uint64 count = 0;
    while(count++ < (NUMBER_OF_ITERATIONS_PER_ONE_MILI_SECOND * n) );
}

/*Requirements:
 * MCU frequency 16MHZ
 * Use the 3 RGB Led at PF1, PF2, and PF3
 * A roll action is performed using the LEDs each led for 1 second. the first LED is lit
 * and roll down to the last LED then back to the first LED. This operation is done continuously
 * Generate Edge Triggered Interrupt on PF0 pin using SW2. Interrupt should be triggered with falling
 * edge and it should turn on 3 RGB LEDs for 5 seconds when an interrupt occurs. Use delay function in the
 * example*/

#define Enable_Exceptions()    __asm(" CPSIE I ")

#define Disable_Exceptions()   __asm(" CPSID I ")

#define Enable_Faults()        __asm(" CPSIE F ")

#define Disable_Faults()       __asm(" CPSID F ")

#define Wait_For_Interrupt()   __asm(" WFI ")

volatile uint8 interrupt_flag = 0;

//GPIO PORTF INTERRUPT HANDLER
void GPIOPortF_Handler(void)
{
    interrupt_flag = 1;
    SetBit(GPIO_PORTF_ICR_REG,0);
}


void SW2_Init(void)
{
    //This PIN require unlocking
    GPIO_PORTF_LOCK_REG = 0x4C4F434B; //unlock commit register for portf
    //Allow configurations on PIN PF0
    SetBit(GPIO_PORTF_CR_REG,0);
    //Disable Analog on PF0
    ClearBit(GPIO_PORTF_AMSEL_REG,0);
    //Choose GPIO mode for the PF0 PIN
    GPIO_PORTF_PCTL_REG &= 0xFFFFFFF0;
    //Configure the direction of PF0 to be input
    ClearBit(GPIO_PORTF_DIR_REG,0);
    //Disable Alternate function
    ClearBit(GPIO_PORTF_AFSEL_REG,0);
    //Enable pull up resistor
    SetBit(GPIO_PORTF_PUR_REG,0);
    //Enable digital I/O
    SetBit(GPIO_PORTF_DEN_REG,0);
    //detect edges on PF0
    ClearBit(GPIO_PORTF_IS_REG,0);
    //Disable both edges we will just use a falling edge detection
    ClearBit(GPIO_PORTF_IBE_REG,0);
    //Enable falling edge detection
    ClearBit(GPIO_PORTF_IEV_REG,0);
    //Clear the Interrupt flag of PF0
    SetBit(GPIO_PORTF_ICR_REG,0);
    //Enable Interrupt for PF0
    SetBit(GPIO_PORTF_IM_REG,0);
    //Enable NVIC and set priority
    NVIC_PRI7_REG = (NVIC_PRI7_REG & GPIO_PORTF_PRIORITY_MASK) | (GPIO_PORTF_INTERRUPT_PRIORITY << GPIO_PORTF_PRIORITY_BITS_POS);
    SetBit(NVIC_EN0_REG,30);
}

//Init Function for Leds
void Leds_Init(void)
{
    /* Disable Analog on PF1, PF2 and PF3 */
    GPIO_PORTF_AMSEL_REG &= 0xF1;
    /* Clear PMCx bits for PF1, PF2 and PF3 to use it as GPIO pin */
    GPIO_PORTF_PCTL_REG  &= 0xFFFF000F;
    /* Configure PF1, PF2 and PF3 as output pin */
    GPIO_PORTF_DIR_REG   |= 0x0E;
    /* Disable alternative function on PF1, PF2 and PF3 */
    GPIO_PORTF_AFSEL_REG &= 0xF1;
    /* Enable Digital I/O on PF1, PF2 and PF3 */
    GPIO_PORTF_DEN_REG   |= 0x0E;
    /* Clear bit 0, 1 and 2 in Data register to turn off the leds */
    GPIO_PORTF_DATA_REG  &= 0xFFFFFFF1;
}

int main(void)
{
    /* Enable clock for PORTF and wait for clock to start */
    SYSCTL_RCGCGPIO_REG |= 0x20;
    while(!(SYSCTL_PRGPIO_REG & 0x20));

     /* Initialize the SW2(PF0) as GPIO Pin and activate external interrupt with falling edge */
    SW2_Init();

    /* Initialize the LEDs as GPIO Pins */
    Leds_Init();

    /* Enable Interrupts, Exceptions and Faults */
    Enable_Exceptions();
    Enable_Faults();

    while(1)
    {
        if(interrupt_flag == 0)
        {
            SetBit(GPIO_PORTF_DATA_REG,1);
            ClearBit(GPIO_PORTF_DATA_REG,2);
            ClearBit(GPIO_PORTF_DATA_REG,3);
            Delay_MS(1000);
            SetBit(GPIO_PORTF_DATA_REG,2);
            ClearBit(GPIO_PORTF_DATA_REG,1);
            ClearBit(GPIO_PORTF_DATA_REG,3);
            Delay_MS(1000);
            SetBit(GPIO_PORTF_DATA_REG,3);
            ClearBit(GPIO_PORTF_DATA_REG,1);
            ClearBit(GPIO_PORTF_DATA_REG,3);
            Delay_MS(1000);
        }
        else if(interrupt_flag == 1)
        {
            SetBit(GPIO_PORTF_DATA_REG,1);
            SetBit(GPIO_PORTF_DATA_REG,2);
            SetBit(GPIO_PORTF_DATA_REG,3);
            Delay_MS(5000);
            interrupt_flag = 0;
        }
    }
}
