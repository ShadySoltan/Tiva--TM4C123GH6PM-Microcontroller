#include "tm4c123gh6pm_registers.h"

/*Requirements:
    a) Same as exercise 4 in NVIC examples but MCU frequency is 16MHZ (NO PLL)

    b) Roll the three leds using a delay function in the main app

    c) Use the SysTick timer to count to 1 second using interrupt. after 5 seconds SysTick timer
        it will trigger and interrupt

    d) inside the SysTick Handler turn all 3 LEDs for 5 seconds and turn on the pendSV inside it

    e) The PendSV should wait for the SysTick handler to finish first then start its exception

    f) Inside the PendSV handler turn off all the leds for 5 seconds then return back to main program*/

/*_________________________________________________________________________________________________________________*/

//Masking Values for PLL Registers
#define SYSCTL_RCC2_USERCC2_MASK        0x80000000  /* USERCC2 Bit MASK */
#define SYSCTL_RCC2_BYPASS2_MASK        0x00000800  /* PLL BYPASS2 Bit MASK */
#define SYSCTL_RCC_XTAL_MASK            0x000007C0  /* XTAL Bits MASK */
#define SYSCTL_RCC_XTAL_8MHZ            0x0E        /* 8 MHz Crystal Value */
#define SYSCTL_RCC_XTAL_16MHZ           0x15        /* 16 MHz Crystal Value */
#define SYSCTL_RCC_XTAL_BIT_POS         6           /* XTAL Bits Position start from bit number 6 */
#define SYSCTL_RCC2_OSCSRC2_MASK        0x00000070  /* OSCSRC2 Bits MASK */
#define SYSCTL_RCC2_OSCSRC2_MOSC        0x0         /* MOSC(Main Oscillator) value */
#define SYSCTL_RCC2_OSCSRC2_BIT_POS     4           /* OSCSRC2 Bits Position start from bit number 4 */
#define SYSCTL_RCC2_PWRDN2_MASK         0x00002000  /* PWRDN2 Bit MASK */
#define SYSCTL_RCC2_DIV400_MASK         0x40000000  /* DIV400 Bit MASK to Divide PLL as 400 MHz vs. 200 */
#define SYSCTL_RCC2_SYSDIV2_MASK        0x1FC00000  /* SYSDIV2 Bits MASK */
#define SYSCTL_RIS_PLLLRIS_MASK         0x00000040  /* PLLLRIS Bit MASK */
#define SYSCTL_RCC2_SYSDIV2_BIT_POS     22       /* SYSDIV2 Bits Position start from bit number 22 */
#define SYSDIV2_VALUE                   4



#define SYSTICK_PRIORITY_MASK        0x1FFFFFFF
#define SYSTICK_INTERRUPT_PRIORITY       3
#define SYSTICK_PRIORITY_BITS_POS        29

#define PENDSV_PRIORITY_MASK        0xFF1FFFFF
#define PENDSV_INTERRUPT_PRIORITY       7       /* Lowest Priority Level*/
#define PENDSV_PRIORITY_BITS_POS        21

#define NUMBER_TICKS_PER_ONE_SECOND      1
#define NUMBER_TICKS_PER_TWO_SECOND      2
#define NUMBER_TICKS_PER_THREE_SECOND    3
#define NUMBER_TICKS_PER_FIVE_SECOND     5

/* Enable Exceptions ... This Macro enable IRQ interrupts, Programmable Systems Exceptions and Faults by clearing the I-bit in the PRIMASK. */
#define Enable_Exceptions()    __asm(" CPSIE I ")

/* Disable Exceptions ... This Macro disable IRQ interrupts, Programmable Systems Exceptions and Faults by setting the I-bit in the PRIMASK. */
#define Disable_Exceptions()   __asm(" CPSID I ")

/* Enable Faults ... This Macro enable Faults by clearing the F-bit in the FAULTMASK */
#define Enable_Faults()        __asm(" CPSIE F ")

/* Disable Faults ... This Macro disable Faults by setting the F-bit in the FAULTMASK */
#define Disable_Faults()       __asm(" CPSID F ")

/* Go to low power mode while waiting for the next interrupt */
#define Wait_For_Interrupt()   __asm(" WFI ")

#define NUMBER_OF_ITERATIONS_PER_ONE_MILI_SECOND 364

void Delay_MS(unsigned long long n)
{
    volatile uint64 count = 0;
    while(count++ < (NUMBER_OF_ITERATIONS_PER_ONE_MILI_SECOND * n) );
}

volatile uint8 ticks_num = 0;

void SysTick_Handler(void)
{
    ticks_num++;

    if(ticks_num == NUMBER_TICKS_PER_FIVE_SECOND)
    {
        // 1. Disable the SysTick Timer by Clear the ENABLE Bit to not trigger SysTick Exception again
        //SYSTICK_CTRL_REG    = 0;

        // 2. Pend the PendSV System Exception by set the PENDSV bit in the INTCTRL register
        SetBit(NVIC_SYSTEM_INTCTRL,28);

        // 3. Turn on the three leds for 5 seconds
        GPIO_PORTF_DATA_REG |= 0x0E;
        Delay_MS(5000);

        // 4. Reset the ticks_num
        ticks_num = 0;
    }
}

//PendSV Handler
void PendSV_Handler(void)
{
    //Turn off all the leds for 5 seconds
    GPIO_PORTF_DATA_REG &= 0xF1;
    Delay_MS(5000);
}

/* Enable PF1, PF2 and PF3 (RED, Blue and Green LEDs) */
void Leds_Init(void)
{
    GPIO_PORTF_AMSEL_REG &= 0xF1;         /* Disable Analog on PF1, PF2 and PF3 */
    GPIO_PORTF_PCTL_REG  &= 0xFFFF000F;   /* Clear PMCx bits for PF1, PF2 and PF3 to use it as GPIO pin */
    GPIO_PORTF_DIR_REG   |= 0x0E;         /* Configure PF1, PF2 and PF3 as output pin */
    GPIO_PORTF_AFSEL_REG &= 0xF1;         /* Disable alternative function on PF1, PF2 and PF3 */
    GPIO_PORTF_DEN_REG   |= 0x0E;         /* Enable Digital I/O on PF1, PF2 and PF3 */
    GPIO_PORTF_DATA_REG  &= 0xF1;         /* Clear bit 0, 1 and 2 in Data register to turn off the leds */
}

//Initialize Systick timer
void SysTick_Init(void)
{
    SYSTICK_CTRL_REG    = 0;               /* Disable the SysTick Timer by Clear the ENABLE Bit */
    SYSTICK_RELOAD_REG  = 15999999;        /* Set the Reload value with 15999999 to count 1 Second */
    SYSTICK_CURRENT_REG = 0;               /* Clear the Current Register value */
    /* Configure the SysTick Control Register
     * Enable the SysTick Timer (ENABLE = 1)
     * Enable SysTick Interrupt (INTEN = 1)
     * Choose the clock source to be System Clock (CLK_SRC = 1) */
    SYSTICK_CTRL_REG   |= 0x07;
    /* Assign priority level 0 to the SysTick Interrupt */
    NVIC_SYSTEM_PRI3_REG =  (NVIC_SYSTEM_PRI3_REG & SYSTICK_PRIORITY_MASK) | (SYSTICK_INTERRUPT_PRIORITY << SYSTICK_PRIORITY_BITS_POS);
}

/* Initialize and Assign Priority level to PendSV System Exception */
void PendSV_Init(void)
{
    /* Assign priority level 7 to the PendSV Interrupt */
    NVIC_SYSTEM_PRI3_REG =  (NVIC_SYSTEM_PRI3_REG & PENDSV_PRIORITY_MASK) | (PENDSV_INTERRUPT_PRIORITY << PENDSV_PRIORITY_BITS_POS);
}


int main(void)
{

    /* Enable clock for PORTF and wait for clock to start */
    SYSCTL_RCGCGPIO_REG |= 0x20;
    while(!(SYSCTL_PRGPIO_REG & 0x20));

    /* Initialize the LEDs as GPIO Pins */
    Leds_Init();

    /* Initialize the SysTick Timer to generate an interrupt every 1 second */
    SysTick_Init();

    /* Initialize the PendSV System Exception */
    PendSV_Init();

    /* Enable Interrupts, Exceptions and Faults */
    Enable_Exceptions();
    Enable_Faults();

    while(1)
    {
        SetBit(GPIO_PORTF_DATA_REG,1);
        ClearBit(GPIO_PORTF_DATA_REG,2);
        ClearBit(GPIO_PORTF_DATA_REG,3);
        Delay_MS(1000);

        SetBit(GPIO_PORTF_DATA_REG,2);
        ClearBit(GPIO_PORTF_DATA_REG,1);
        ClearBit(GPIO_PORTF_DATA_REG,3);
        Delay_MS(1000);

        SetBit(GPIO_PORTF_DATA_REG,3);
        ClearBit(GPIO_PORTF_DATA_REG,2);
        ClearBit(GPIO_PORTF_DATA_REG,1);
        Delay_MS(1000);
    }
}
